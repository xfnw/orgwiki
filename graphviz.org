#+TITLE: graphviz
#+SETUPFILE: setupfile.org

graphviz is a cool renderer thing for diagrams

#+TOC: headlines 3

* using it

you can use it [[http://www.google.com/url?q=https://dreampuf.github.io/GraphvizOnline/&sa=U&ved=2ahUKEwiBhu2An4H8AhXTEFkFHREXByAQFnoECAoQAg&usg=AOvVaw3_6nvfLOYJh713VB5c7nfo][online]], or, if you install it to your computer, the
command to run it will be the layout plugin you want to use, for
example ~dot~

* xfnw's opinionated recommendations

** layout plugin
for directed graphs (ie flowcharts), use ~dot~. for undirected graphs,
use ~fdp~. all the other ones i have either not been able to output
anything meaningful, or layout the data worse than ~dot~ and ~fdp~ 

* examples

** irc LINKS graph
this awk script will take output of irc's ~LINKS~ command, and convert
it to an undirected graphviz graph. change ~$5~ and ~$6~ to where the
two server names are in your log format.

sometimes reversing the ~LINKS~ output with ~tac(1)~ or sorting with
~sort(1)~ before feeding it into awk seems to make graphviz have a
better layout.

#+begin_fixme
this assumes the letters of servernames are unique! it will break, for
example, if you have both ~me.ow.cat~ and ~meow.cat~
#+end_fixme

#+begin_src awk :tangle tangle/linkstographviz.awk
BEGIN {
	"date -u '+%Y-%m-%d %H:%M:%SZ'" | getline time;
	print "graph l {"
}
{
	from="x" $5;
	to="x" $6;
	gsub("[\\.-]","",from);
	gsub("[\\.-]","",to);
	print from " [label=\"" $5 "\"]; ";
	if (from != to) {
		print to " -- " from ";"
	}
}
END {
	print "curtime [label=\"generated " time "\"; shape=\"box\"];";
	print "}"
}
#+end_src

* reference

** digraph/graph
~graph~ is for showing relations. it uses ~--~ to connect items.
#+begin_example
graph MyNiceGraph {
	kitty -- cat;
}
#+end_example

~digraph~ is for showing directed stuff, like flowcharts. it uses ~->~
to connect items.
#+begin_example
digraph MyNiceDigraph {
	cat -> meow;
	cat -> hiss;
}
#+end_example

the word after them is the id, which can be pretty much anything you
want. it is for differentiating which graph you want to render if you
have multiple in a file. you'll have to quote it if you want to use
weird characters.

** setting default node shape
there is a special name called ~node~ that applies to all nodes by
default.

#+begin_example
digraph Rectangles {
	node [shape="box"];

	ovals [shape="ellipse"];
	rectangles -> ovals [label="are much nicer than"];
}
#+end_example

** make lines less bendy
by default, relations are shown with a spline, which makes a smooth
curve when possible. you can set the ~splines~ option to change
this. the value ~ortho~ will force 90\deg lines, but this often gives
horrible results with large gaps and overlaps for non-trivial
graphs. ~polyline~ uses a sequence of straight lines.

#+begin_example
digraph ItsPolyTime {
	splines=polyline;

	h:w -> fox:e;
	fox:n -> h:s;
}
#+end_example

graphviz sadly does not have a "squared" lines option[fn:1:why not?
seems like it would be easy to implement, just "ortho without the gaps
in the lines" would probably be fine, perhaps with some extra
padding]. however, this can be emulated by creating invisible nodes to
route lines where you want.

in this example, we also use ~dir=back~ backwards line and ~rank=same~
trickery to make graphviz' ranking algorithm put nodes in the right
places.

#+begin_example
digraph TheLetterH {
	splines=polyline;

	hidden [label=""; color=white];
	hidden2 [label=""; color=white];

	{rank=same; h; fox}
	{rank=same; hidden; hidden2}

	fox -> h;
	h -> hidden2:n [arrowhead=none];
	hidden:n -> hidden2:n [arrowhead=none];
	fox -> hidden:n [dir=back];
}
#+end_example

** direction
~rankdir~ sets the rank direction, which affects the direction of the
graph when using the ~dot~ layout

the argument is a combination of ~T~ (top), ~b~ (bottom), ~L~ (left), and
~R~ (right). for example ~LR~ goes left-to-right

#+begin_example
digraph Sideways {
	rankdir=LR;

	left -> right;
}
#+end_example
